const express = require('express');
const dbConnection = require('./pilot');
const passengers = require('./passenger');
const app = express();

app.use(express.json());

const server = require('http').createServer(app);

const WebSocket = require("ws");

const wss = new WebSocket.Server({ server: server });


// const server = require('http').createServer(app);
// const WebSocket = require("ws");

// const wss = new WebSocket.Server({server:server});
// wss.on('connection',function connection(ws){
//     ws.send('Welcome new Client');
//     ws.on('message',function incoming(message){
//         ws.send('Got ur message its:'+ message);
//     });
// });

// app.get('/',(req,res)=>res.send('Hello World'));
// server.listen(3001,()=>console.log('Listening on port:3001'));




app.get('/pilots', async (req, res) => {
  let data = await dbConnection();
  let ress = await data.find({}).toArray();
  res.send(ress);
});



app.get('/passengers/getpilot',async(req,res)=>{

  let data =  await dbConnection();

 let result = await data.aggregate([{
    '$geoNear': {        //This is for finding the destination. First we find common destination.
      'distanceField': 'distance',
      'key': 'polylineLocs',
      'maxDistance': 235,
      'spherical': true,
      'near': {
        'type': 'Point',
        'coordinates':
          [
               parseFloat(req.query['long']),
            parseFloat(req.query['lat'])
          ]
      },

    },
  },
  {
    '$match': {
      'location': {   // This is for finding nearby pilots at current location.
        '$geoWithin': {
          '$centerSphere': [
            [parseFloat(req.query['currLong']), parseFloat(req.query['currLat'])], 0.0776714 / 3963.189]
        }
      }
    }
  }
  ]).toArray();


  


     if(result.length>0)
 {
 let passenger = await passengers();
 let passengersdata = await passenger.find({phone:parseInt(req.query['phone'])}).toArray();

 wss.clients.forEach((client)=>{
 client.send(JSON.stringify(result[0]+passengerdata));
 res.send(JSON.parse(JSON.stringify(result[0])))
 })
 }
 else
 {
  wss.clients.forEach((client)=>{
    client.send("Bhai ismein tereko kuch nahi milenga");
   })
 }

res.send("successfully sent notification");
});

wss.on('connection', async (ws, req) => {
 ws.on('message', async (message) => {
     console.log(message.toString());
     console.log("Hello Flutter");
    console.log("sent");

 });


});





app.get('/passengers', async (req, res) => {
  let data = await passengers();
  let ress = await data.find({}).toArray();
  res.send(ress);
});




app.delete('/pilots/deleteUser',async(req,res)=>{
      let data = await dbConnection();
      let result = await data.deleteOne({
        phone:parseInt(req.query['phone'])
      });
      console.log(result);
      res.send( "User deleted");
})


app.delete('/passengers/deleteUser',async(req,res)=>{
  let data = await passengers();
  let result = await data.deleteOne({
    phone:parseInt(req.query['phone'])
  });
  console.log(result);
  res.send( "User deleted");
});


app.put('/passengers/updateUser', async (req, res) => {
  let data = await passengers();
  let ress = await data.updateOne(
    { phone: parseInt(req.query['phone']) },
    { $set: { currLoc: req.query['src'], destination: req.query['dest'] } }
  );
  if(ress.acknowledged)
  {
    res.send("passenger updated");
  }
  else
  {
    res.send("passenger Not Updated");
  }

});



const dispatch=async(params)=>{

}

   
app.get('/passengers/getNearestPilots',async (req,res)=>{
  let data = await dbConnection();
  let result = await data.find({
    'polylineLocs': {
      '$nearSphere': {
        '$geometry': {
          'type': 'Point', 
          'coordinates': 
          [78.052717,
           30.296711]
        }, 
        '$maxDistance': 250, 
        '$minDistance': 0
      }
    }
  },
  {
    'location': {
      '$nearSphere': {
        '$geometry': {
          'type': 'Point', 
          'coordinates': [
            parseFloat(req.query['long']),parseFloat(req.query['lat'])
          ]
        }, 
        '$maxDistance': 100, 
        '$minDistance': 0
      }
    }
  }).toArray();
    dispatch(result[0]);
  console.log(result);
  res.send(result); 
});

app.put('/pilots/updateUser', async (req, res) => {
  let data = await dbConnection();
  let ress = await data.updateOne(
    { phone: parseInt(req.query['phone']) },
    { $set: { currLoc: req.query['src'], destination: req.query['dest'] } }
  );
  if(ress.acknowledged)
  {
    res.send("Pilot updated");
  }
  else
  {
    res.send("Pilot Not Updated");
  }

});


app.get('/pilots/UserInfo', async (req, res) => {
  let data = await dbConnection();
  let result = await data.find({ phone: parseInt(req.query['phone']) }).toArray();
  console.log(result);
  res.send(result);
});






app.get('/passengers/getUserInfo', async (req, res) => {
  let data = await passengers();
  let result = await data.find({ phone: parseInt(req.query['phone']) }).toArray();
  console.log(result);
  console.log('entered I have');
  res.send(result);
});






app.post('/pilots/pushNewUser', async (req, res) => {

  let data = await dbConnection();
  let ress = await data.insertOne(req.body);
  if (ress.acknowledged) {
    res.send('User Pushed');

  }
  else {
    res.send('maja ni aaya');

  }

});
app.post('/passengers/pushNewUser', async (req, res) => {

  let data = await passengers();
  let ress = await data.insertOne(req.body);
  if (ress.acknowledged) {
    res.send('User Pushed');

  }
  else {
    res.send('maja ni aaya');

  }

});
server.listen(3001, () => console.log('Listening on port:3001'));
app.listen(5000);
module.exports = app;
